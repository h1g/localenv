- name: "Deploy poject {{ project }} / {{ repo_name }}"
  hosts: localhost
  gather_facts: true
  vars_files:
    - "{{ playbook_dir }}/vars/main.yml"
    - "{{ playbook_dir }}/vars/localenv.yml"
    - "{{ playbook_dir }}/projects/{{ project }}.yml"
  tasks:
    - name: "Extract variables for {{ project }} / {{ repo_name }}"
      set_fact:
        "{{ item.key }}": "{{ item.value }}"
      loop: "{{ lookup('vars',repo_name)|dict2items }}"

    - name: "Load tech oriented variables"
      include_vars:
        dir: "{{ playbook_dir + '/vars/tech' }}"
        files_matching: "{{ tech + '.yml' }}"

    - name: "Load docker-compose services primitives"
      include_vars:
        dir: "{{ playbook_dir + '/vars/primitives/' }}"
        name: services_primitives
        files_matching: "{{ services.keys()|join('.yml|') }}"

    - name: "Merge docker-compose project services with services primitives"
      set_fact:
        services: "{{ services_primitives|combine(services|dict2items|rejectattr('value','equalto',none)|list|items2dict,recursive=True) }}"

    - name: "Create package cache directory for tech {{ tech }} - {{ cache_dirs[tech]|regex_replace('^.*:(.*)$','\\1') }}"
      file:
        path: "{{ cache_dirs[tech]|regex_replace('^.*:(.*)$','\\1') }}"
        state: directory
      when: tech in cache_dirs.keys()

    - name: "Create services directory: {{ service_dir }}"
      file:
        path: "{{ service_dir }}"
        state: directory

    - name: "Create sources directory: {{ source_dir }}"
      file:
        path: "{{ source_dir }}"
        state: directory
      when: tech not in ['service']

    - name: "Generate cli_depends_on list"
      set_fact:
        cli_depends_on: "{{ cli_depends_on|default([]) + [ item.key ] }}"
      when: item.key not in ['cli','nginx'] and 'cli' in services.keys() and item.value['image'] != services['cli']['image'] + '_' + project + '_' + repo_name
      loop: "{{ services|dict2items }}"

#    - debug:
#        var: cli_depends_on
#    - meta: end_play

    - name: "Generate persistent_volumes list"
      set_fact:
        persistent_volumes: "{{ persistent_volumes|default([]) + item.value['volumes']|flatten|reject('search',':')|map('regex_replace','(.*)',item.key + '\\1')|list  }}"
      when: item.value['volumes'] is defined
      loop: "{{ services|dict2items }}"

    - name: "Create dcoker-composer services dirs for project : {{ project }}/{{ repo_name }}"
      file:
        path: "{{ service_dir }}/{{ item.path }}"
        state: directory
      when: item.state == 'directory' and item.path in services.keys()
      loop: "{{ lookup('filetree',playbook_dir + '/templates/') }}"

    - name: "Render templated services files for project : {{ project }}/{{ repo_name }}"
      template:
        src: "{{ playbook_dir }}/templates/{{ item.path }}"
        dest: "{{ service_dir }}/{{ item.path|regex_replace('\\.j2','') }}"
        mode: preserve
      when: item.state == 'file' and item.path is search ('.j2') and ( item.path in ['Makefile.j2' , 'docker-compose.yml.j2'] or item.path|dirname in services.keys() )
      loop: "{{ lookup('filetree',playbook_dir + '/templates/') }}"

    - name: "Render services files for project : {{ project }}/{{ repo_name }}"
      copy:
        src: "{{ playbook_dir }}/templates/{{ item.path }}"
        dest: "{{ service_dir }}/{{ item.path }}"
        mode: preserve
      when: item.state == 'file' and item.path is not search ('.j2') and item.path|dirname in services.keys()
      loop: "{{ lookup('filetree',playbook_dir + '/templates/') }}"

    - name: "Code receive block"
      block:
        - name: "Git pull branch: {{ branch|default(git_code_branch_default) }} from {{ git_server }}{{ project }}/{{ repo_name }}.git to {{ source_dir }}"
          git:
            accept_hostkey: yes
            dest: "{{ source_dir }}"
            repo: "{{ git_server }}{{ project }}/{{ repo_name }}.git"
            version: "{{ branch|default('master') }}"
            force: "{{ get_code_force|default('no') }}"
      rescue:
        - name: fail on error
          fail:
            msg: "Filed: Git pull branch: {{ branch|default('master') }} from {{ git_server }}{{ project }}/{{ repo_name }}.git to {{ source_dir }} \
                  - lock Pull is not possible because you have unmerged files. Please, fix them up in the work tree"
      when: tech not in ['service']
